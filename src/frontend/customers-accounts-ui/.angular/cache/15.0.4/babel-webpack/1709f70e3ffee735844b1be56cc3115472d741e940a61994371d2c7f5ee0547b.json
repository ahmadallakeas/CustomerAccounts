{"ast":null,"code":"import { map, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(store, router) {\n    this.store = store;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.store.select('auth').pipe(take(1), map(authState => {\n      return authState.customer;\n    }), map(customer => {\n      const isAuth = !!customer;\n      if (isAuth) {\n        return true;\n      }\n      return this.router.createUrlTree(['/auth']);\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAASA,GAAG,EAAcC,IAAI,QAAQ,MAAM;;;;AAM5C,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,KAA8B,EAAUC,MAAc;IAAtD,UAAK,GAALD,KAAK;IAAmC,WAAM,GAANC,MAAM;EAAW;EAE7EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B,OAAO,IAAI,CAACJ,KAAK,CAACK,MAAM,CAAC,MAAM,CAAC,CAACC,IAAI,CACnCT,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEW,SAAS,IAAI;MAChB,OAAOA,SAAS,CAACC,QAAQ;IAC3B,CAAC,CAAC,EACFZ,GAAG,CAAEY,QAAQ,IAAI;MACf,MAAMC,MAAM,GAAG,CAAC,CAACD,QAAQ;MACzB,IAAIC,MAAM,EAAE;QACV,OAAO,IAAI;;MAEb,OAAO,IAAI,CAACR,MAAM,CAACS,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CACH;EACH;;AAxBWZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;EAAAc,YAFR;AAAM","names":["map","take","AuthGuard","constructor","store","router","canActivate","route","state","select","pipe","authState","customer","isAuth","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { map, Observable, take } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport * as fromApp from '../store/app.reducer';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private store: Store<fromApp.AppState>, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this.store.select('auth').pipe(\n      take(1),\n      map((authState) => {\n        return authState.customer;\n      }),\n      map((customer) => {\n        const isAuth = !!customer;\n        if (isAuth) {\n          return true;\n        }\n        return this.router.createUrlTree(['/auth']);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}