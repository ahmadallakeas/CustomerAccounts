{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport { Customer } from 'src/app/shared/Customer.Model';\nimport * as AuthActions from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nconst handleAuthentication = (firstName, lastName, email, token, expiresIn) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  const user = new Customer(firstName, lastName, email, token, expirationDate);\n  localStorage.setItem('userData', JSON.stringify(user));\n  console.log(user.firstName);\n  return AuthActions.authenticateSuccess({\n    firstName,\n    lastName,\n    email,\n    token,\n    expirationDate,\n    redirect: true\n  });\n};\nconst handleError = errorRes => {\n  let errorMessage = 'An unknown error occurred!';\n  if (!errorRes.error) {\n    return of(AuthActions.authenticateFail({\n      errorMessage\n    }));\n  }\n  if (errorRes.error.Message) {\n    errorMessage = errorRes.error.Message;\n  } else {\n    errorMessage = 'Wrong email or password';\n  }\n  console.log(errorMessage);\n  return of(AuthActions.authenticateFail({\n    errorMessage\n  }));\n};\nexport class AuthEffects {\n  constructor(actions$, http) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.authLogin$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginStart), switchMap(action => {\n      return this.http.post('https://localhost:7112/api/authenticate/login', {\n        Email: action.email,\n        Password: action.password\n      }).pipe(map(response => {\n        console.log(response.token);\n        return handleAuthentication(response.firstName, response.lastName, response.email, response.token, response.expiresIn);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    })), {\n      dispatch: false\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAa,MAAM;AAC1D,SAASC,QAAQ,QAAQ,+BAA+B;AACxD,OAAO,KAAKC,WAAW,MAAM,gBAAgB;;;;AAU7C,MAAMC,oBAAoB,GAAG,CAC3BC,SAAiB,EACjBC,QAAgB,EAChBC,KAAa,EACbC,KAAa,EACbC,SAAiB,KACf;EACF,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGH,SAAS,GAAG,IAAI,CAAC;EACxE,MAAMI,IAAI,GAAG,IAAIX,QAAQ,CAACG,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEE,cAAc,CAAC;EAC5EI,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;EACtDK,OAAO,CAACC,GAAG,CAACN,IAAI,CAACR,SAAS,CAAC;EAC3B,OAAOF,WAAW,CAACiB,mBAAmB,CAAC;IACrCf,SAAS;IACTC,QAAQ;IACRC,KAAK;IACLC,KAAK;IACLE,cAAc;IACdW,QAAQ,EAAE;GACX,CAAC;AACJ,CAAC;AAED,MAAMC,WAAW,GAAIC,QAAa,IAAI;EACpC,IAAIC,YAAY,GAAG,4BAA4B;EAC/C,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;IACnB,OAAOzB,EAAE,CAACG,WAAW,CAACuB,gBAAgB,CAAC;MAAEF;IAAY,CAAE,CAAC,CAAC;;EAE3D,IAAID,QAAQ,CAACE,KAAK,CAACE,OAAO,EAAE;IAC1BH,YAAY,GAAGD,QAAQ,CAACE,KAAK,CAACE,OAAO;GACtC,MAAM;IACLH,YAAY,GAAG,yBAAyB;;EAE1CN,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;EAEzB,OAAOxB,EAAE,CAACG,WAAW,CAACuB,gBAAgB,CAAC;IAAEF;EAAY,CAAE,CAAC,CAAC;AAC3D,CAAC;AAGD,OAAM,MAAOI,WAAW;EA8BtBC,YAAoBC,QAAiB,EAAUC,IAAgB;IAA3C,aAAQ,GAARD,QAAQ;IAAmB,SAAI,GAAJC,IAAI;IA7BnD,eAAU,GAAGnC,YAAY,CACvB,MACE,IAAI,CAACkC,QAAQ,CAACE,IAAI,CAChBnC,MAAM,CAACM,WAAW,CAAC8B,UAAU,CAAC,EAC9BhC,SAAS,CAAEiC,MAAM,IAAI;MACnB,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CAAC,+CAA+C,EAAE;QACrDC,KAAK,EAAEF,MAAM,CAAC3B,KAAK;QACnB8B,QAAQ,EAAEH,MAAM,CAACI;OAClB,CAAC,CACDN,IAAI,CACHjC,GAAG,CAAEwC,QAA0B,IAAI;QACjCrB,OAAO,CAACC,GAAG,CAACoB,QAAQ,CAAC/B,KAAK,CAAC;QAC3B,OAAOJ,oBAAoB,CACzBmC,QAAQ,CAAClC,SAAS,EAClBkC,QAAQ,CAACjC,QAAQ,EACjBiC,QAAQ,CAAChC,KAAK,EACdgC,QAAQ,CAAC/B,KAAK,EACd+B,QAAQ,CAAC9B,SAAS,CACnB;MACH,CAAC,CAAC,EACFX,UAAU,CAAEyB,QAAQ,IAAI;QACtB,OAAOD,WAAW,CAACC,QAAQ,CAAC;MAC9B,CAAC,CAAC,CACH;IACL,CAAC,CAAC,CACH,EACH;MAAEiB,QAAQ,EAAE;IAAK,CAAE,CACpB;EACiE;;AA9BvDZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;AAAA","names":["createEffect","ofType","catchError","map","of","switchMap","Customer","AuthActions","handleAuthentication","firstName","lastName","email","token","expiresIn","expirationDate","Date","getTime","user","localStorage","setItem","JSON","stringify","console","log","authenticateSuccess","redirect","handleError","errorRes","errorMessage","error","authenticateFail","Message","AuthEffects","constructor","actions$","http","pipe","loginStart","action","post","Email","Password","password","response","dispatch","factory"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\store\\auth.effects.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, of, switchMap, tap } from 'rxjs';\r\nimport { Customer } from 'src/app/shared/Customer.Model';\r\nimport * as AuthActions from './auth.actions';\r\n\r\nexport interface AuthResponseData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nconst handleAuthentication = (\r\n  firstName: string,\r\n  lastName: string,\r\n  email: string,\r\n  token: string,\r\n  expiresIn: number\r\n) => {\r\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n  const user = new Customer(firstName, lastName, email, token, expirationDate);\r\n  localStorage.setItem('userData', JSON.stringify(user));\r\n  console.log(user.firstName);\r\n  return AuthActions.authenticateSuccess({\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    token,\r\n    expirationDate,\r\n    redirect: true,\r\n  });\r\n};\r\n\r\nconst handleError = (errorRes: any) => {\r\n  let errorMessage = 'An unknown error occurred!';\r\n  if (!errorRes.error) {\r\n    return of(AuthActions.authenticateFail({ errorMessage }));\r\n  }\r\n  if (errorRes.error.Message) {\r\n    errorMessage = errorRes.error.Message;\r\n  } else {\r\n    errorMessage = 'Wrong email or password';\r\n  }\r\n  console.log(errorMessage);\r\n\r\n  return of(AuthActions.authenticateFail({ errorMessage }));\r\n};\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  authLogin$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.loginStart),\r\n        switchMap((action) => {\r\n          return this.http\r\n            .post('https://localhost:7112/api/authenticate/login', {\r\n              Email: action.email,\r\n              Password: action.password,\r\n            })\r\n            .pipe(\r\n              map((response: AuthResponseData) => {\r\n                console.log(response.token);\r\n                return handleAuthentication(\r\n                  response.firstName,\r\n                  response.lastName,\r\n                  response.email,\r\n                  response.token,\r\n                  response.expiresIn\r\n                );\r\n              }),\r\n              catchError((errorRes) => {\r\n                return handleError(errorRes);\r\n              })\r\n            );\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  constructor(private actions$: Actions, private http: HttpClient) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}