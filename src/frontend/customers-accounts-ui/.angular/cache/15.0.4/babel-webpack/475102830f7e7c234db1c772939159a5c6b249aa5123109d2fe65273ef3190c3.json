{"ast":null,"code":"import * as AuthActions from '../store/auth.actions';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/loading-spinner/loading-spinner.component\";\nimport * as i5 from \"../../shared/placeholder.directive\";\nfunction LoginComponent_ng_template_0_Template(rf, ctx) {}\nfunction LoginComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"app-loading-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n    i0.ɵɵtext(2, \"Login:\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(store) {\n    this.store = store;\n    this.isLoading = false;\n    this.errorMessage = null;\n  }\n  ngOnInit() {\n    this.storeSub = this.store.select('auth').subscribe({\n      next: authState => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      }\n    });\n  }\n  onSubmit(loginForm) {\n    if (!loginForm.valid) {\n      return;\n    }\n    const email = loginForm.value.email;\n    const password = loginForm.value.password;\n    this.store.dispatch(AuthActions.loginStart({\n      email,\n      password\n    }));\n    loginForm.reset();\n  }\n  onClear(loginForm) {\n    loginForm.reset();\n  }\n  showErrorAlert(error) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n  ngOnDestroy() {\n    this.storeSub.unsubscribe();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  viewQuery: function LoginComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(PlaceholderDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  decls: 21,\n  vars: 3,\n  consts: [[\"appPlaceholder\", \"\"], [1, \"row\"], [\"style\", \"text-align: center\", 4, \"ngIf\"], [1, \"col-sm-12\", \"col-md-4\", \"col-lg-4\"], [4, \"ngIf\"], [1, \"col-sm-12\", \"col-md-6\", \"col-lg-6\"], [3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [1, \"m-2\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"ngModel\", \"\", \"required\", \"\", \"email\", \"\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"ngModel\", \"\", \"required\", \"\", \"minlength\", \"6\", 1, \"form-control\"], [1, \"m-2\", \"my-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-warning\", \"mx-3\", 3, \"click\"], [2, \"text-align\", \"center\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r4 = i0.ɵɵgetCurrentView();\n      i0.ɵɵtemplate(0, LoginComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, LoginComponent_div_2_Template, 2, 0, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtemplate(4, LoginComponent_div_4_Template, 3, 0, \"div\", 4);\n      i0.ɵɵelementStart(5, \"div\", 5)(6, \"form\", 6, 7);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n        i0.ɵɵrestoreView(_r4);\n        const _r3 = i0.ɵɵreference(7);\n        return i0.ɵɵresetView(ctx.onSubmit(_r3));\n      });\n      i0.ɵɵelementStart(8, \"div\", 8)(9, \"label\", 9);\n      i0.ɵɵtext(10, \"Email Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"label\", 11);\n      i0.ɵɵtext(14, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 13)(17, \"button\", 14);\n      i0.ɵɵtext(18, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_19_listener() {\n        i0.ɵɵrestoreView(_r4);\n        const _r3 = i0.ɵɵreference(7);\n        return i0.ɵɵresetView(ctx.onClear(_r3));\n      });\n      i0.ɵɵtext(20, \" Clear \");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(7);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"disabled\", !_r3.valid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinLengthValidator, i3.EmailValidator, i3.NgModel, i3.NgForm, i4.LoadingSpinnerComponent, i5.PlaceholderDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAIA,OAAO,KAAKA,WAAW,MAAM,uBAAuB;AAEpD,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,cAAc,QAAQ,sCAAsC;;;;;;;;;;ICLnEC,+BAAkD;IAChDA,sCAA2C;IAC7CA,iBAAM;;;;;IAEJA,2BAAwB;IAClBA,sBAAM;IAAAA,iBAAK;;;ADQrB,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,KAA8B;IAA9B,UAAK,GAALA,KAAK;IAHzB,cAAS,GAAG,KAAK;IACjB,iBAAY,GAAW,IAAI;EAE0B;EAErDC,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,KAAK,CAACG,MAAM,CAAC,MAAM,CAAC,CAACC,SAAS,CAAC;MAClDC,IAAI,EAAGC,SAAS,IAAI;QAClBC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;QACtB,IAAI,CAACG,YAAY,GAAGH,SAAS,CAACG,YAAY;QAC1C,IAAI,CAACC,SAAS,GAAGJ,SAAS,CAACK,OAAO;QAClC,IAAI,IAAI,CAACF,YAAY,EAAE;UACrB,IAAI,CAACG,cAAc,CAAC,IAAI,CAACH,YAAY,CAAC;;MAE1C;KACD,CAAC;EACJ;EAEAI,QAAQ,CAACC,SAAiB;IACxB,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;MACpB;;IAEF,MAAMC,KAAK,GAAGF,SAAS,CAACG,KAAK,CAACD,KAAK;IACnC,MAAME,QAAQ,GAAGJ,SAAS,CAACG,KAAK,CAACC,QAAQ;IACzC,IAAI,CAAClB,KAAK,CAACmB,QAAQ,CAACzB,WAAW,CAAC0B,UAAU,CAAC;MAAEJ,KAAK;MAAEE;IAAQ,CAAE,CAAC,CAAC;IAChEJ,SAAS,CAACO,KAAK,EAAE;EACnB;EACAC,OAAO,CAACR,SAAiB;IACvBA,SAAS,CAACO,KAAK,EAAE;EACnB;EACQT,cAAc,CAACW,KAAa;IAClC,MAAMC,YAAY,GAAG,IAAI,CAACC,WAAW,CAACC,gBAAgB;IACtDF,YAAY,CAACG,KAAK,EAAE;IACpB,MAAMC,SAAS,GAAGJ,YAAY,CAACK,eAAe,CAACjC,cAAc,CAAC;IAC9DgC,SAAS,CAACE,QAAQ,CAACC,OAAO,GAAGR,KAAK;IAClC,MAAMS,KAAK,GAAGJ,SAAS,CAACE,QAAQ,CAACG,MAAM,CAAC7B,SAAS,CAAC,MAAK;MACrD4B,KAAK,CAACE,WAAW,EAAE;MACnBV,YAAY,CAACG,KAAK,EAAE;IACtB,CAAC,CAAC;EACJ;EAEAQ,WAAW;IACT,IAAI,CAACjC,QAAQ,CAACgC,WAAW,EAAE;EAC7B;;AA/CWpC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAsC;EAAAC;IAAA;qBACd1C,oBAAoB;;;;;;;;;;;;;MChBjCE,+EAA0C;MAC1CA,8BAAiB;MACfA,+DAEM;MACNA,8BAAyC;MACvCA,+DAEM;MACNA,8BAAyC;MACbA;QAAAA;QAAA;QAAA,OAAYA,gCAAmB;MAAA,EAAC;MACxDA,8BAAiB;MACuBA,+BAAc;MAAAA,iBAAQ;MAC5DA,6BAQE;MACJA,iBAAM;MACNA,+BAAiB;MAC0BA,0BAAS;MAAAA,iBAAQ;MAC1DA,6BAQE;MACJA,iBAAM;MACNA,gCAAsB;MAMlBA,wBACF;MAAAA,iBAAS;MACTA,mCAIC;MADCA;QAAAA;QAAA;QAAA,OAASA,+BAAkB;MAAA,EAAC;MAE5BA,wBACF;MAAAA,iBAAS;;;;MA/CXA,eAAe;MAAfA,oCAAe;MAIbA,eAAgB;MAAhBA,qCAAgB;MAiCdA,gBAA6B;MAA7BA,qCAA6B","names":["AuthActions","PlaceholderDirective","AlertComponent","i0","LoginComponent","constructor","store","ngOnInit","storeSub","select","subscribe","next","authState","console","log","errorMessage","isLoading","loading","showErrorAlert","onSubmit","loginForm","valid","email","value","password","dispatch","loginStart","reset","onClear","error","containerRef","placeholder","viewContainerRef","clear","component","createComponent","instance","message","event","closed","unsubscribe","ngOnDestroy","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\login\\login.component.ts","C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { OnInit, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as AuthActions from '../store/auth.actions';\nimport * as fromApp from '../../store/app.reducer';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  @ViewChild(PlaceholderDirective, { static: false })\n  placeholder: PlaceholderDirective;\n  storeSub: Subscription;\n  isLoading = false;\n  errorMessage: string = null;\n\n  constructor(private store: Store<fromApp.AppState>) {}\n\n  ngOnInit(): void {\n    this.storeSub = this.store.select('auth').subscribe({\n      next: (authState) => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      },\n    });\n  }\n\n  onSubmit(loginForm: NgForm) {\n    if (!loginForm.valid) {\n      return;\n    }\n    const email = loginForm.value.email;\n    const password = loginForm.value.password;\n    this.store.dispatch(AuthActions.loginStart({ email, password }));\n    loginForm.reset();\n  }\n  onClear(loginForm: NgForm) {\n    loginForm.reset();\n  }\n  private showErrorAlert(error: string) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.storeSub.unsubscribe();\n  }\n}\n","<ng-template appPlaceholder></ng-template>\n<div class=\"row\">\n  <div *ngIf=\"isLoading\" style=\"text-align: center\">\n    <app-loading-spinner></app-loading-spinner>\n  </div>\n  <div class=\"col-sm-12 col-md-4 col-lg-4\">\n    <div *ngIf=\"!isLoading\">\n      <h1>Login:</h1>\n    </div>\n    <div class=\"col-sm-12 col-md-6 col-lg-6\">\n      <form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm)\">\n        <div class=\"m-2\">\n          <label class=\"form-label\" for=\"email\">Email Address:</label>\n          <input\n            class=\"form-control\"\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            ngModel\n            required\n            email\n          />\n        </div>\n        <div class=\"m-2\">\n          <label class=\"form-label\" for=\"password\">Password:</label>\n          <input\n            class=\"form-control\"\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            ngModel\n            required\n            minlength=\"6\"\n          />\n        </div>\n        <div class=\"m-2 my-3\">\n          <button\n            class=\"btn btn-outline-primary\"\n            type=\"submit\"\n            [disabled]=\"!loginForm.valid\"\n          >\n            Login\n          </button>\n          <button\n            class=\"btn btn-outline-warning mx-3\"\n            type=\"button\"\n            (click)=\"onClear(loginForm)\"\n          >\n            Clear\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}