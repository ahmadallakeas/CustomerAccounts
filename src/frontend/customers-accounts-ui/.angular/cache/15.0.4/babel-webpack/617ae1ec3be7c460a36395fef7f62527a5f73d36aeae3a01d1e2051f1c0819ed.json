{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport * as AuthActions from '../store/auth.actions';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nlet LoginComponent = class LoginComponent {\n  constructor(store) {\n    this.store = store;\n    this.isLoading = false;\n    this.errorMessage = null;\n  }\n  ngOnInit() {\n    this.storeSub = this.store.select('auth').subscribe({\n      next: authState => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      }\n    });\n  }\n  onSubmit(loginForm) {\n    if (!loginForm.valid) {\n      return;\n    }\n    const email = loginForm.value.email;\n    const password = loginForm.value.password;\n    this.store.dispatch(AuthActions.loginStart({\n      email,\n      password\n    }));\n    loginForm.reset();\n  }\n  onClear(loginForm) {\n    loginForm.reset();\n  }\n  showErrorAlert(error) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n  ngOnDestroy() {\n    this.storeSub.unsubscribe();\n  }\n};\n__decorate([ViewChild(PlaceholderDirective, {\n  static: false\n})], LoginComponent.prototype, \"placeholder\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,eAAe;AAIpD,OAAO,KAAKC,WAAW,MAAM,uBAAuB;AAEpD,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,cAAc,QAAQ,sCAAsC;AAQ9D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YAAoBC,KAA8B;IAA9B,UAAK,GAALA,KAAK;IAHzB,cAAS,GAAG,KAAK;IACjB,iBAAY,GAAW,IAAI;EAE0B;EAErDC,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,KAAK,CAACG,MAAM,CAAC,MAAM,CAAC,CAACC,SAAS,CAAC;MAClDC,IAAI,EAAGC,SAAS,IAAI;QAClBC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;QACtB,IAAI,CAACG,YAAY,GAAGH,SAAS,CAACG,YAAY;QAC1C,IAAI,CAACC,SAAS,GAAGJ,SAAS,CAACK,OAAO;QAClC,IAAI,IAAI,CAACF,YAAY,EAAE;UACrB,IAAI,CAACG,cAAc,CAAC,IAAI,CAACH,YAAY,CAAC;;MAE1C;KACD,CAAC;EACJ;EAEAI,QAAQ,CAACC,SAAiB;IACxB,IAAI,CAACA,SAAS,CAACC,KAAK,EAAE;MACpB;;IAEF,MAAMC,KAAK,GAAGF,SAAS,CAACG,KAAK,CAACD,KAAK;IACnC,MAAME,QAAQ,GAAGJ,SAAS,CAACG,KAAK,CAACC,QAAQ;IACzC,IAAI,CAAClB,KAAK,CAACmB,QAAQ,CAACxB,WAAW,CAACyB,UAAU,CAAC;MAAEJ,KAAK;MAAEE;IAAQ,CAAE,CAAC,CAAC;IAChEJ,SAAS,CAACO,KAAK,EAAE;EACnB;EACAC,OAAO,CAACR,SAAiB;IACvBA,SAAS,CAACO,KAAK,EAAE;EACnB;EACQT,cAAc,CAACW,KAAa;IAClC,MAAMC,YAAY,GAAG,IAAI,CAACC,WAAW,CAACC,gBAAgB;IACtDF,YAAY,CAACG,KAAK,EAAE;IACpB,MAAMC,SAAS,GAAGJ,YAAY,CAACK,eAAe,CAAChC,cAAc,CAAC;IAC9D+B,SAAS,CAACE,QAAQ,CAACC,OAAO,GAAGR,KAAK;IAClC,MAAMS,KAAK,GAAGJ,SAAS,CAACE,QAAQ,CAACG,MAAM,CAAC7B,SAAS,CAAC,MAAK;MACrD4B,KAAK,CAACE,WAAW,EAAE;MACnBV,YAAY,CAACG,KAAK,EAAE;IACtB,CAAC,CAAC;EACJ;EAEAQ,WAAW;IACT,IAAI,CAACjC,QAAQ,CAACgC,WAAW,EAAE;EAC7B;CACD;AA9CCE,YADC1C,SAAS,CAACE,oBAAoB,EAAE;EAAEyC,MAAM,EAAE;AAAK,CAAE,CAAC,mDACjB;AAFvBvC,cAAc,eAL1BL,SAAS,CAAC;EACT6C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW1C,cAAc,CAgD1B;SAhDYA,cAAc","names":["Component","ViewChild","AuthActions","PlaceholderDirective","AlertComponent","LoginComponent","constructor","store","ngOnInit","storeSub","select","subscribe","next","authState","console","log","errorMessage","isLoading","loading","showErrorAlert","onSubmit","loginForm","valid","email","value","password","dispatch","loginStart","reset","onClear","error","containerRef","placeholder","viewContainerRef","clear","component","createComponent","instance","message","event","closed","unsubscribe","ngOnDestroy","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { OnInit, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as AuthActions from '../store/auth.actions';\nimport * as fromApp from '../../store/app.reducer';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  @ViewChild(PlaceholderDirective, { static: false })\n  placeholder: PlaceholderDirective;\n  storeSub: Subscription;\n  isLoading = false;\n  errorMessage: string = null;\n\n  constructor(private store: Store<fromApp.AppState>) {}\n\n  ngOnInit(): void {\n    this.storeSub = this.store.select('auth').subscribe({\n      next: (authState) => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      },\n    });\n  }\n\n  onSubmit(loginForm: NgForm) {\n    if (!loginForm.valid) {\n      return;\n    }\n    const email = loginForm.value.email;\n    const password = loginForm.value.password;\n    this.store.dispatch(AuthActions.loginStart({ email, password }));\n    loginForm.reset();\n  }\n  onClear(loginForm: NgForm) {\n    loginForm.reset();\n  }\n  private showErrorAlert(error: string) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.storeSub.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}