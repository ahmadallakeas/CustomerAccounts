{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, of, switchMap, tap } from 'rxjs';\nimport * as AuthActions from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nconst handleError = errorRes => {\n  // let errorMessage = 'An unknown error occurred!';\n  // if (!errorRes.error || !errorRes.error.error) {\n  //   return of(AuthActions.authenticateFail({errorMessage}));\n  // }\n  // switch (errorRes.error.error.message) {\n  //   case 'EMAIL_EXISTS':\n  //     errorMessage = 'This email exists already';\n  //     break;\n  //   case 'EMAIL_NOT_FOUND':\n  //     errorMessage = 'This email does not exist.';\n  //     break;\n  //   case 'INVALID_PASSWORD':\n  //     errorMessage = 'This password is not correct.';\n  //     break;\n  // }\n  // return of(AuthActions.authenticateFail({errorMessage}));\n  let errorMessage = 'An unknown error occurred!';\n  console.log(errorRes);\n  return of(AuthActions.authenticateFail({\n    errorMessage\n  }));\n};\nexport class AuthEffects {\n  constructor(actions$, http) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.authLogin$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginStart), switchMap(action => {\n      return this.http.post('https://localhost:7112/api/authenticate/login', {\n        Email: action.email,\n        Password: action.password\n      }).pipe(tap(response => {\n        console.log(response);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    })), {\n      dispatch: false\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,EAAE,EAAEC,SAAS,EAAEC,GAAG,QAAQ,MAAM;AACrD,OAAO,KAAKC,WAAW,MAAM,gBAAgB;;;;AAU7C,MAAMC,WAAW,GAAIC,QAAa,IAAI;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,YAAY,GAAG,4BAA4B;EAE/CC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EACrB,OAAOL,EAAE,CAACG,WAAW,CAACM,gBAAgB,CAAC;IAAEH;EAAY,CAAE,CAAC,CAAC;AAC3D,CAAC;AAGD,OAAM,MAAOI,WAAW;EAuBtBC,YAAoBC,QAAiB,EAAUC,IAAgB;IAA3C,aAAQ,GAARD,QAAQ;IAAmB,SAAI,GAAJC,IAAI;IAtBnD,eAAU,GAAGhB,YAAY,CACvB,MACE,IAAI,CAACe,QAAQ,CAACE,IAAI,CAChBhB,MAAM,CAACK,WAAW,CAACY,UAAU,CAAC,EAC9Bd,SAAS,CAAEe,MAAM,IAAI;MACnB,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CAAC,+CAA+C,EAAE;QACrDC,KAAK,EAAEF,MAAM,CAACG,KAAK;QACnBC,QAAQ,EAAEJ,MAAM,CAACK;OAClB,CAAC,CACDP,IAAI,CACHZ,GAAG,CAAEoB,QAAQ,IAAI;QACff,OAAO,CAACC,GAAG,CAACc,QAAQ,CAAC;MACvB,CAAC,CAAC,EACFvB,UAAU,CAAEM,QAAQ,IAAI;QACtB,OAAOD,WAAW,CAACC,QAAQ,CAAC;MAC9B,CAAC,CAAC,CACH;IACL,CAAC,CAAC,CACH,EACH;MAAEkB,QAAQ,EAAE;IAAK,CAAE,CACpB;EACiE;;AAvBvDb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;AAAA","names":["createEffect","ofType","catchError","of","switchMap","tap","AuthActions","handleError","errorRes","errorMessage","console","log","authenticateFail","AuthEffects","constructor","actions$","http","pipe","loginStart","action","post","Email","email","Password","password","response","dispatch","factory"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\store\\auth.effects.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, of, switchMap, tap } from 'rxjs';\r\nimport * as AuthActions from './auth.actions';\r\n\r\nexport interface AuthResponseData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nconst handleError = (errorRes: any) => {\r\n  // let errorMessage = 'An unknown error occurred!';\r\n  // if (!errorRes.error || !errorRes.error.error) {\r\n  //   return of(AuthActions.authenticateFail({errorMessage}));\r\n  // }\r\n  // switch (errorRes.error.error.message) {\r\n  //   case 'EMAIL_EXISTS':\r\n  //     errorMessage = 'This email exists already';\r\n  //     break;\r\n  //   case 'EMAIL_NOT_FOUND':\r\n  //     errorMessage = 'This email does not exist.';\r\n  //     break;\r\n  //   case 'INVALID_PASSWORD':\r\n  //     errorMessage = 'This password is not correct.';\r\n  //     break;\r\n  // }\r\n  // return of(AuthActions.authenticateFail({errorMessage}));\r\n  let errorMessage = 'An unknown error occurred!';\r\n\r\n  console.log(errorRes);\r\n  return of(AuthActions.authenticateFail({ errorMessage }));\r\n};\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  authLogin$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.loginStart),\r\n        switchMap((action) => {\r\n          return this.http\r\n            .post('https://localhost:7112/api/authenticate/login', {\r\n              Email: action.email,\r\n              Password: action.password,\r\n            })\r\n            .pipe(\r\n              tap((response) => {\r\n                console.log(response);\r\n              }),\r\n              catchError((errorRes) => {\r\n                return handleError(errorRes);\r\n              })\r\n            );\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  constructor(private actions$: Actions, private http: HttpClient) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}