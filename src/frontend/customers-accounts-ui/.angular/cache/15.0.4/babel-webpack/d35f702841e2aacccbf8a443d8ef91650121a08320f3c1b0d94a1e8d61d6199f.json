{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap, tap } from 'rxjs';\nimport { Customer } from 'src/app/shared/Customer.Model';\nimport * as AuthActions from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth.service\";\nconst handleAuthentication = (customerId, firstName, lastName, email, token, expiresIn) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  const user = new Customer(customerId, firstName, lastName, email, token, expirationDate);\n  localStorage.setItem('customer', JSON.stringify(user));\n  return AuthActions.authenticateSuccess({\n    firstName,\n    lastName,\n    email,\n    token,\n    expirationDate,\n    redirect: true\n  });\n};\nconst handleError = errorRes => {\n  console.log(errorRes);\n  let errorMessage = 'An unknown error occurred!';\n  if (!errorRes.error || errorRes.statusText === 'Unknown Error') {\n    return of(AuthActions.authenticateFail({\n      errorMessage\n    }));\n  }\n  if (errorRes.error.Message) {\n    errorMessage = errorRes.error.Message;\n  } else {\n    errorMessage = 'Wrong email or password';\n  }\n  return of(AuthActions.authenticateFail({\n    errorMessage\n  }));\n};\nconst handleRegisterError = errorRes => {\n  console.log(errorRes);\n  let errorMessage = 'An unknown error occurred!';\n  if (!errorRes.error || errorRes.statusText === 'Unknown Error') {\n    return of(AuthActions.authenticateFail({\n      errorMessage\n    }));\n  }\n  var errors = Object.values(errorRes.error);\n  errorMessage = errors[0][0];\n  return of(AuthActions.authenticateFail({\n    errorMessage\n  }));\n};\nexport class AuthEffects {\n  constructor(actions$, http, router, authService) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authService = authService;\n    this.authLogin$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginStart), switchMap(action => {\n      return this.http.post('https://localhost:7112/api/authenticate/login', {\n        Email: action.email,\n        Password: action.password\n      }).pipe(map(response => {\n        console.log(response);\n        return handleAuthentication(response.customerId, response.firstName, response.lastName, response.email, response.token, response.expiresIn);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    })));\n    this.authRegister$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.signupStart), switchMap(action => {\n      return this.http.post('https://localhost:7112/api/authenticate/register', {\n        FirstName: action.firstName,\n        LastName: action.lastName,\n        Email: action.email,\n        Password: action.password\n      }).pipe(map(response => {\n        console.log(response);\n        return handleAuthentication(response.firstName, response.lastName, response.email, response.token, response.expiresIn);\n      }), catchError(errorRes => {\n        console.log(errorRes);\n        return handleRegisterError(errorRes);\n      }));\n    })));\n    this.authRedirect$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.authenticateSuccess), tap(action => action.redirect && this.router.navigate(['/']))), {\n      dispatch: false\n    });\n    this.authLogout$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.logout), tap(() => {\n      this.authService.clearLogoutTimer();\n      localStorage.removeItem('customer');\n      this.router.navigate(['/login']);\n    })), {\n      dispatch: false\n    });\n    this.authAutoLogin$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.autoLogin), map(() => {\n      const customer = JSON.parse(localStorage.getItem('customer'));\n      if (!customer) {\n        return {\n          type: 'DUMMY'\n        };\n      }\n      loadedCustomer;\n      if (loadedCustomer) {\n        // this.user.next(loadedUser);\n        const expirationDuration = new Date(loadedCustomer._tokenExpirationDate).getTime() - new Date().getTime();\n        this.authService.setLogoutTimer(expirationDuration);\n        // return AuthActions.authenticateSuccess({\n        //   email: loadedCustomer.email,\n        //   userId: loadedCustomer.customerId,\n        //   token: loadedCustomer.token,\n        //   expirationDate: new Date(loadedCustomer._tokenExpirationDate),\n        //   redirect: false\n        // });\n      }\n    })), {\n      dispatch: false\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["createEffect","ofType","catchError","map","of","switchMap","tap","Customer","AuthActions","handleAuthentication","customerId","firstName","lastName","email","token","expiresIn","expirationDate","Date","getTime","user","localStorage","setItem","JSON","stringify","authenticateSuccess","redirect","handleError","errorRes","console","log","errorMessage","error","statusText","authenticateFail","Message","handleRegisterError","errors","Object","values","AuthEffects","constructor","actions$","http","router","authService","pipe","loginStart","action","post","Email","Password","password","response","signupStart","FirstName","LastName","navigate","dispatch","logout","clearLogoutTimer","removeItem","autoLogin","customer","parse","getItem","type","loadedCustomer","expirationDuration","_tokenExpirationDate","setLogoutTimer","factory"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\store\\auth.effects.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, of, switchMap, tap } from 'rxjs';\r\nimport { Customer } from 'src/app/shared/Customer.Model';\r\nimport { AuthService } from '../auth.service';\r\nimport * as AuthActions from './auth.actions';\r\n\r\nexport interface AuthResponseData {\r\n  customerId:number;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nconst handleAuthentication = (\r\n  customerId:string,\r\n  firstName: string,\r\n  lastName: string,\r\n  email: string,\r\n  token: string,\r\n  expiresIn: number\r\n) => {\r\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n  const user = new Customer(customerId,firstName, lastName, email, token, expirationDate);\r\n  localStorage.setItem('customer', JSON.stringify(user));\r\n  return AuthActions.authenticateSuccess({\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    token,\r\n    expirationDate,\r\n    redirect: true,\r\n  });\r\n};\r\n\r\nconst handleError = (errorRes: any) => {\r\n  console.log(errorRes);\r\n  let errorMessage = 'An unknown error occurred!';\r\n  if (!errorRes.error || errorRes.statusText === 'Unknown Error') {\r\n    return of(AuthActions.authenticateFail({ errorMessage }));\r\n  }\r\n  if (errorRes.error.Message) {\r\n    errorMessage = errorRes.error.Message;\r\n  } else {\r\n    errorMessage = 'Wrong email or password';\r\n  }\r\n\r\n  return of(AuthActions.authenticateFail({ errorMessage }));\r\n};\r\nconst handleRegisterError = (errorRes: any) => {\r\n  console.log(errorRes);\r\n\r\n  let errorMessage = 'An unknown error occurred!';\r\n  if (!errorRes.error || errorRes.statusText === 'Unknown Error') {\r\n    return of(AuthActions.authenticateFail({ errorMessage }));\r\n  }\r\n  var errors = Object.values(errorRes.error);\r\n  errorMessage = errors[0][0];\r\n  return of(AuthActions.authenticateFail({ errorMessage }));\r\n};\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  authLogin$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.loginStart),\r\n      switchMap((action) => {\r\n        return this.http\r\n          .post('https://localhost:7112/api/authenticate/login', {\r\n            Email: action.email,\r\n            Password: action.password,\r\n          })\r\n          .pipe(\r\n            map((response: AuthResponseData) => {\r\n              console.log(response);\r\n\r\n              return handleAuthentication(\r\n                response.customerId,\r\n                response.firstName,\r\n                response.lastName,\r\n                response.email,\r\n                response.token,\r\n                response.expiresIn\r\n              );\r\n            }),\r\n            catchError((errorRes) => {\r\n              return handleError(errorRes);\r\n            })\r\n          );\r\n      })\r\n    )\r\n  );\r\n  authRegister$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(AuthActions.signupStart),\r\n      switchMap((action) => {\r\n        return this.http\r\n          .post('https://localhost:7112/api/authenticate/register', {\r\n            FirstName: action.firstName,\r\n            LastName: action.lastName,\r\n            Email: action.email,\r\n            Password: action.password,\r\n          })\r\n          .pipe(\r\n            map((response: AuthResponseData) => {\r\n              console.log(response);\r\n              return handleAuthentication(\r\n                response.firstName,\r\n                response.lastName,\r\n                response.email,\r\n                response.token,\r\n                response.expiresIn\r\n              );\r\n            }),\r\n            catchError((errorRes) => {\r\n              console.log(errorRes);\r\n\r\n              return handleRegisterError(errorRes);\r\n            })\r\n          );\r\n      })\r\n    )\r\n  );\r\n  authRedirect$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.authenticateSuccess),\r\n        tap((action) => action.redirect && this.router.navigate(['/']))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  authLogout$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.logout),\r\n        tap(() => {\r\n          this.authService.clearLogoutTimer();\r\n          localStorage.removeItem('customer');\r\n          this.router.navigate(['/login']);\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  authAutoLogin$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(AuthActions.autoLogin),\r\n        map(() => {\r\n          const customer:{\r\n            email: string;\r\n            firstName: string;\r\n            lastName:string\r\n            _token: string;\r\n            _tokenExpirationDate: string;\r\n          } = JSON.parse(\r\n            localStorage.getItem('customer')\r\n          );\r\n          if(!customer)\r\n          {\r\n            return { type: 'DUMMY' };\r\n          }\r\n          loadedCustomer\r\n          if (loadedCustomer) {\r\n            // this.user.next(loadedUser);\r\n            const expirationDuration =\r\n              new Date(loadedCustomer._tokenExpirationDate).getTime() -\r\n              new Date().getTime();\r\n            this.authService.setLogoutTimer(expirationDuration);\r\n            // return AuthActions.authenticateSuccess({\r\n            //   email: loadedCustomer.email,\r\n            //   userId: loadedCustomer.customerId,\r\n            //   token: loadedCustomer.token,\r\n            //   expirationDate: new Date(loadedCustomer._tokenExpirationDate),\r\n            //   redirect: false\r\n            // });\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  constructor(\r\n    private actions$: Actions,\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}