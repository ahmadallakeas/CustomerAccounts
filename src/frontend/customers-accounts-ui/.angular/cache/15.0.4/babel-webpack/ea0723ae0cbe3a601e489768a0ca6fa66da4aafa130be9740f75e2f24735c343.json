{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as AuthActions from '../store/auth.actions';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../shared/loading-spinner/loading-spinner.component\";\nfunction RegisterComponent_ng_template_0_Template(rf, ctx) {}\nfunction RegisterComponent_app_loading_spinner_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loading-spinner\");\n  }\n}\nexport class RegisterComponent {\n  constructor(store) {\n    this.store = store;\n    this.isLoading = false;\n    this.errorMessage = null;\n  }\n  initForm() {\n    this.registerForm = new FormGroup({\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email, Validators.pattern(/(?=.*[0-9])/)]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n  ngOnInit() {\n    this.initForm();\n    this.storeSub = this.store.select('auth').subscribe({\n      next: authState => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      }\n    });\n  }\n  onSubmit() {\n    console.log(this.registerForm.value);\n    if (!this.registerForm.valid) {\n      return;\n    }\n    const firstName = this.registerForm.value.firstName;\n    const lastName = this.registerForm.value.lastName;\n    const email = this.registerForm.value.email;\n    const password = this.registerForm.value.password;\n    this.store.dispatch(AuthActions.signupStart({\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    }));\n  }\n  onClear() {\n    this.registerForm.reset();\n  }\n  showErrorAlert(error) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n  ngOnDestroy() {\n    this.storeSub.unsubscribe();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  viewQuery: function RegisterComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(PlaceholderDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  decls: 29,\n  vars: 4,\n  consts: [[\"appPlaceholder\", \"\"], [1, \"row\"], [1, \"col-sm-12\", \"col-xs-12\", \"col-md-4\", \"col-lg-4\"], [4, \"ngIf\"], [1, \"col-sm-12\", \"col-xs-12\", \"col-md-6\", \"col-lg-6\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"m-2\"], [\"for\", \"firstName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"for\", \"lastName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [1, \"m-2\", \"my-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-warning\", \"mx-3\", 3, \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegisterComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, RegisterComponent_app_loading_spinner_3_Template, 1, 0, \"app-loading-spinner\", 3);\n      i0.ɵɵelementStart(4, \"h1\");\n      i0.ɵɵtext(5, \"Register:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"label\", 7);\n      i0.ɵɵtext(10, \"First Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Last Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 6)(17, \"label\", 11);\n      i0.ɵɵtext(18, \"Email Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 6)(21, \"label\", 13);\n      i0.ɵɵtext(22, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 15)(25, \"button\", 16);\n      i0.ɵɵtext(26, \" Register \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_27_listener() {\n        return ctx.onClear();\n      });\n      i0.ɵɵtext(28, \" Clear \");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"placeholder\", \"Password should contain atleast 1 digit\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.LoadingSpinnerComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","AuthActions","AlertComponent","PlaceholderDirective","i0","RegisterComponent","constructor","store","initForm","registerForm","firstName","required","lastName","email","pattern","password","minLength","ngOnInit","storeSub","select","subscribe","next","authState","console","log","errorMessage","isLoading","loading","showErrorAlert","onSubmit","value","valid","dispatch","signupStart","onClear","reset","error","containerRef","placeholder","viewContainerRef","clear","component","createComponent","instance","message","event","closed","unsubscribe","ngOnDestroy","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\register\\register.component.ts","C:\\Users\\USER\\source\\repos\\CustomerAccounts\\src\\frontend\\customers-accounts-ui\\src\\app\\auth\\register\\register.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport * as AuthActions from '../store/auth.actions';\nimport * as fromApp from '../../store/app.reducer';\nimport { Subscription } from 'rxjs';\nimport { AlertComponent } from 'src/app/shared/alert/alert.component';\nimport { PlaceholderDirective } from 'src/app/shared/placeholder.directive';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  registerForm: FormGroup;\n  storeSub: Subscription;\n  @ViewChild(PlaceholderDirective, { static: false })\n  placeholder: PlaceholderDirective;\n  isLoading = false;\n  errorMessage: string = null;\n\n  constructor(private store: Store<fromApp.AppState>) {}\n\n  initForm() {\n    this.registerForm = new FormGroup({\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required),\n      email: new FormControl('', [\n        Validators.required,\n        Validators.email,\n        Validators.pattern(/(?=.*[0-9])/),\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n    });\n  }\n  ngOnInit(): void {\n    this.initForm();\n    this.storeSub = this.store.select('auth').subscribe({\n      next: (authState) => {\n        console.log(authState);\n        this.errorMessage = authState.errorMessage;\n        this.isLoading = authState.loading;\n        if (this.errorMessage) {\n          this.showErrorAlert(this.errorMessage);\n        }\n      },\n    });\n  }\n  onSubmit() {\n    console.log(this.registerForm.value);\n    if (!this.registerForm.valid) {\n      return;\n    }\n    const firstName = this.registerForm.value.firstName;\n    const lastName = this.registerForm.value.lastName;\n    const email = this.registerForm.value.email;\n    const password = this.registerForm.value.password;\n\n    this.store.dispatch(\n      AuthActions.signupStart({\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password,\n      })\n    );\n  }\n\n  onClear() {\n    this.registerForm.reset();\n  }\n  private showErrorAlert(error: string) {\n    const containerRef = this.placeholder.viewContainerRef;\n    containerRef.clear();\n    const component = containerRef.createComponent(AlertComponent);\n    component.instance.message = error;\n    const event = component.instance.closed.subscribe(() => {\n      event.unsubscribe();\n      containerRef.clear();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.storeSub.unsubscribe();\n  }\n}\n","<ng-template appPlaceholder></ng-template>\n<div class=\"row\">\n  <div class=\"col-sm-12 col-xs-12 col-md-4 col-lg-4\">\n    <app-loading-spinner *ngIf=\"isLoading\"></app-loading-spinner>\n    <h1>Register:</h1>\n  </div>\n  <div class=\"col-sm-12 col-xs-12 col-md-6 col-lg-6\">\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"m-2\">\n        <label class=\"form-label\" for=\"firstName\">First Name:</label>\n        <input\n          class=\"form-control\"\n          type=\"text\"\n          id=\"firstName\"\n          formControlName=\"firstName\"\n        />\n      </div>\n      <div class=\"m-2\">\n        <label class=\"form-label\" for=\"lastName\">Last Name:</label>\n        <input\n          class=\"form-control\"\n          type=\"text\"\n          id=\"lastName\"\n          formControlName=\"lastName\"\n        />\n      </div>\n      <div class=\"m-2\">\n        <label class=\"form-label\" for=\"email\">Email Address:</label>\n        <input\n          class=\"form-control\"\n          type=\"email\"\n          id=\"email\"\n          formControlName=\"email\"\n        />\n      </div>\n      <div class=\"m-2\">\n        <label class=\"form-label\" for=\"password\">Password:</label>\n        <input\n          class=\"form-control\"\n          type=\"password\"\n          id=\"password\"\n          formControlName=\"password\"\n          [placeholder]=\"'Password should contain atleast 1 digit'\"\n        />\n      </div>\n\n      <div class=\"m-2 my-3\">\n        <button\n          class=\"btn btn-outline-primary\"\n          type=\"submit\"\n          [disabled]=\"!registerForm.valid\"\n        >\n          Register\n        </button>\n        <button\n          class=\"btn btn-outline-warning mx-3\"\n          type=\"button\"\n          (click)=\"onClear()\"\n        >\n          Clear\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}